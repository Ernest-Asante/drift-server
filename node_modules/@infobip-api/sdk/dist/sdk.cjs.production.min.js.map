{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/utils/auth-type.ts","../src/utils/email-status-type.ts","../src/utils/validator.ts","../src/utils/auth.ts","../src/utils/http.ts","../src/utils/validators/whatsapp.ts","../src/apis/whatsapp.ts","../src/utils/validators/sms.ts","../src/apis/sms.ts","../src/apis/auth.ts","../src/utils/form-data.ts","../src/apis/email-domain.ts","../src/apis/email.ts","../src/apis/2fa.ts","../src/index.ts"],"sourcesContent":["enum AuthType {\n  Basic = 'Basic',\n  ApiKey = 'App',\n  IBSSO = 'IBSSO',\n  OAuth = 'Bearer',\n}\n\nexport { AuthType };\n","enum EmailStatus {\n  Pending = 'PENDING',\n  Paused = 'PAUSED',\n  Processing = 'PROCESSING',\n  Canceled = 'CANCELED',\n  Finished = 'FINISHED',\n  Failed = 'FAILED',\n}\n\nexport { EmailStatus };\n","module Validator {\n  export function required(x: any, name?: string) {\n    if (x === undefined || x === null || x === '') {\n      throw new Error(`${name} is required.`);\n    }\n\n    return true;\n  }\n\n  export function string(x: any, name?: string) {\n    if (typeof x !== 'string' || x === '') {\n      throw new Error(`${name} must be a string.`);\n    }\n\n    return true;\n  }\n\n  export function number(x: any, name?: string) {\n    if (typeof x !== 'number') {\n      throw new Error(`${name} must be a number.`);\n    }\n\n    return true;\n  }\n\n  export function boolean(x: any, name?: string) {\n    if (typeof x !== 'boolean') {\n      throw new Error(`${name} must be a boolean.`);\n    }\n\n    return true;\n  }\n\n  export function integer(x: any, name?: string) {\n    if (!Number.isInteger(x)) {\n      throw new Error(`${name} must be an integer.`);\n    }\n\n    return true;\n  }\n\n  export function object(x: any, name?: string) {\n    if (typeof x !== 'object') {\n      throw new Error(`${name} must be an object.`);\n    }\n\n    return true;\n  }\n\n  export function array(x: any, name?: string) {\n    if (!Array.isArray(x)) {\n      throw new Error(`${name} must be an array.`);\n    }\n\n    return true;\n  }\n\n  export function oneOf(x: any, y: any, name?: string) {\n    if (!Object.values(y).includes(x)) {\n      throw new Error(`${name} must be one of ${Object.values(y).join(', ')}.`);\n    }\n\n    return true;\n  }\n\n  export function maxLength(x: any, y: number, name?: string) {\n    if (x.length > y) {\n      throw new Error(\n        `${name} must have a length smaller than or equal to ${y}.`\n      );\n    }\n\n    return true;\n  }\n\n  export function max(x: any, y: number, name?: string) {\n    if (x > y) {\n      throw new Error(`${name} must be lower than or equal to ${y}.`);\n    }\n\n    return true;\n  }\n\n  export function requiredString(x: any, name?: string) {\n    return required(x, name) && string(x, name);\n  }\n}\n\nexport { Validator };\n","import { AuthType } from './auth-type';\nimport { Validator } from './validator';\n\nclass InfobipAuth {\n  /**\n   *\n   *\n   */\n\n  baseUrl: string;\n  authType?: AuthType;\n  apiKey?: string;\n  username?: string;\n  password?: string;\n  ibssoToken?: string;\n  oauthToken?: string;\n  authorization?: string;\n\n  constructor({\n    baseUrl,\n    authType = AuthType.ApiKey,\n    apiKey = '',\n    username = '',\n    password = '',\n    ibssoToken = '',\n    oauthToken = '',\n  }: InfobipAuth) {\n    this.baseUrl = baseUrl;\n    this.authType = authType;\n    this.apiKey = apiKey;\n    this.username = username;\n    this.password = password;\n    this.ibssoToken = ibssoToken;\n    this.oauthToken = oauthToken;\n\n    switch (authType) {\n      case AuthType.ApiKey:\n        Validator.required(\n          apiKey,\n          'When using AuthType.ApiKey, Infobip.apiKey'\n        );\n\n        this.authorization = `${authType} ${apiKey}`;\n        break;\n\n      case AuthType.Basic:\n        Validator.required(\n          username,\n          'When using AuthType.Basic, Infobip.username'\n        );\n        Validator.required(\n          password,\n          'When using AuthType.Basic, Infobip.password'\n        );\n\n        this.authorization = `${authType} ${Buffer.from(\n          `${username}:${password}`\n        ).toString('base64')}`;\n\n        break;\n\n      case AuthType.IBSSO:\n        Validator.required(\n          ibssoToken,\n          'When using AuthType.IBSSO, Infobip.ibssoToken'\n        );\n\n        this.authorization = `${authType} ${ibssoToken}`;\n        break;\n\n      case AuthType.OAuth:\n        Validator.required(\n          oauthToken,\n          'When using AuthType.OAuth, Infobip.oauthToken'\n        );\n\n        this.authorization = `${authType} ${oauthToken}`;\n        break;\n\n      default:\n        this.authorization = '';\n        throw new Error(\n          `Invalid authentication type: ${authType}. The only supported types are: ${AuthType.ApiKey}, ${AuthType.Basic}, ${AuthType.IBSSO}, ${AuthType.OAuth}`\n        );\n    }\n  }\n}\n\nexport { InfobipAuth };\n","import axios, { Axios } from 'axios';\n\nclass Http {\n  baseUrl: string;\n  axios: Axios;\n\n  async post(url: string, body?: any, config?: any) {\n    const response = await this.axios.post(url, body, config);\n    return response;\n  }\n\n  async put(url: string, body: any) {\n    const response = await this.axios.put(url, body);\n    return response;\n  }\n\n  async get(url: string, params?: any) {\n    const response = await this.axios.get(url, { params });\n    return response;\n  }\n\n  async download(url: string) {\n    const response = await this.axios.get(url, { responseType: 'stream' });\n    return response;\n  }\n\n  async head(url: string, params?: any) {\n    const response = await this.axios.head(url, { params });\n    return response;\n  }\n\n  async delete(url: string, body?: any) {\n    const response = await this.axios.delete(url, { data: body });\n    return response;\n  }\n\n  constructor(baseUrl: string, authorization?: string) {\n    this.baseUrl = !baseUrl.indexOf('http') ? baseUrl : `https://${baseUrl}`;\n    this.axios = axios.create({\n      baseURL: this.baseUrl,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `${authorization}`,\n      },\n    });\n  }\n}\n\nexport { Http };\n","import { Validator } from '../validator';\n\nexport function validateWhatsappSend(message: any) {\n  if (message.type !== 'template') {\n    Validator.required(message.from, 'message.from');\n    Validator.string(message.from, 'message.from');\n    Validator.required(message.to, 'message.to');\n    Validator.string(message.to, 'message.to');\n    Validator.required(message.content, 'message.content');\n    Validator.object(message.content, 'message.content');\n  }\n\n  if (\n    message.type === 'interactive-buttons' ||\n    message.type === 'interactive-list' ||\n    message.type === 'interactive-multi-product' ||\n    message.type === 'interactive-product'\n  ) {\n    if (message.type !== 'interactive-product') {\n      Validator.required(message.content.body, 'message.content.body');\n      Validator.object(message.content.body, 'message.content.body');\n\n      Validator.required(\n        message.content.body.text,\n        'message.content.body.text'\n      );\n      Validator.string(message.content.body.text, 'message.content.body.text');\n    }\n\n    if (message.content.header) {\n      Validator.required(\n        message.content.header.type,\n        'message.content.header.type'\n      );\n      Validator.string(\n        message.content.header.type,\n        'message.content.header.type'\n      );\n\n      if (message.content.header.type === 'TEXT') {\n        Validator.required(\n          message.content.header.text,\n          'message.content.header.text'\n        );\n        Validator.string(\n          message.content.header.text,\n          'message.content.header.text'\n        );\n      }\n\n      if (\n        message.content.header.type === 'VIDEO' ||\n        message.content.header.type === 'IMAGE' ||\n        message.content.header.type === 'DOCUMENT'\n      ) {\n        Validator.required(\n          message.content.header.mediaUrl,\n          'message.content.header.mediaUrl'\n        );\n        Validator.string(\n          message.content.header.mediaUrl,\n          'message.content.header.mediaUrl'\n        );\n      }\n    }\n\n    if (message.content.footer) {\n      Validator.required(\n        message.content.footer.text,\n        'message.content.footer.text'\n      );\n      Validator.string(\n        message.content.footer.text,\n        'message.content.footer.text'\n      );\n    }\n\n    Validator.required(message.content.action, 'message.content.action');\n    Validator.object(message.content.action, 'message.content.action');\n  }\n\n  switch (message.type) {\n    case 'template':\n      Validator.required(message.messages, 'message.messages');\n      Validator.array(message.messages, 'message.messages');\n      message.messages.forEach((m: any) => {\n        Validator.required(m.from, 'message.messages.from');\n        Validator.string(m.from, 'message.messages.from');\n        Validator.required(m.to, 'message.messages.to');\n        Validator.string(m.to, 'message.messages.to');\n        Validator.required(m.content, 'message.messages.content');\n        Validator.object(m.content, 'message.messages.content');\n\n        Validator.required(\n          m.content.templateName,\n          'message.messages.content.templateName'\n        );\n        Validator.string(\n          m.content.templateName,\n          'message.messages.content.templateName'\n        );\n        Validator.required(\n          m.content.language,\n          'message.messages.content.language'\n        );\n        Validator.string(\n          m.content.language,\n          'message.messages.content.language'\n        );\n        Validator.required(\n          m.content.templateData,\n          'message.messages.content.templateData'\n        );\n        Validator.object(\n          m.content.templateData,\n          'message.messages.content.templateData'\n        );\n\n        Validator.required(\n          m.content.templateData.body,\n          'message.messages.content.templateData.body'\n        );\n        Validator.object(\n          m.content.templateData.body,\n          'message.messages.content.templateData.body'\n        );\n\n        Validator.required(\n          m.content.templateData.body.placeholders,\n          'message.messages.content.templateData.body.placeholders'\n        );\n        Validator.array(\n          m.content.templateData.body.placeholders,\n          'message.messages.content.templateData.body.placeholders'\n        );\n      });\n      break;\n\n    case 'text':\n      Validator.required(message.content.text, 'message.content.text');\n      Validator.string(message.content.text, 'message.content.text');\n      break;\n\n    case 'document':\n    case 'image':\n    case 'video':\n    case 'audio':\n    case 'sticker':\n      Validator.required(message.content.mediaUrl, 'message.content.mediaUrl');\n      Validator.string(message.content.mediaUrl, 'message.content.mediaUrl');\n      break;\n\n    case 'location':\n      Validator.required(\n        message.content.longitude,\n        'message.content.longitude'\n      );\n      Validator.number(message.content.longitude, 'message.content.longitude');\n\n      Validator.required(message.content.latitude, 'message.content.latitude');\n      Validator.number(message.content.latitude, 'message.content.latitude');\n      break;\n\n    case 'contact':\n      Validator.required(message.content.contacts, 'message.content.contacts');\n      Validator.array(message.content.contacts, 'message.content.contacts');\n\n      message.content.contacts.forEach((contact: any) => {\n        Validator.required(contact.name, 'message.content.contacts.name');\n        Validator.object(contact.name, 'message.content.contacts.name');\n\n        Validator.required(\n          contact.name.firstName,\n          'message.content.contacts.name.firstName'\n        );\n        Validator.string(\n          contact.name.firstName,\n          'message.content.contacts.name.firstName'\n        );\n\n        Validator.required(\n          contact.name.formattedName,\n          'message.content.contacts.name.formattedName'\n        );\n        Validator.string(\n          contact.name.formattedName,\n          'message.content.contacts.name.formattedName'\n        );\n      });\n      break;\n\n    case 'interactive-buttons':\n      Validator.required(\n        message.content.action.buttons,\n        'message.content.action.buttons'\n      );\n      Validator.array(\n        message.content.action.buttons,\n        'message.content.action.buttons'\n      );\n\n      message.content.action.buttons.forEach((button: any) => {\n        Validator.required(button.type, 'message.content.action.buttons.type');\n        Validator.string(button.type, 'message.content.action.buttons.type');\n\n        Validator.required(button.id, 'message.content.action.buttons.id');\n        Validator.string(button.id, 'message.content.action.buttons.id');\n\n        Validator.required(\n          button.title,\n          'message.content.action.buttons.title'\n        );\n        Validator.string(button.title, 'message.content.action.buttons.title');\n      });\n      break;\n\n    case 'interactive-list':\n      Validator.required(\n        message.content.action.title,\n        'message.content.action.title'\n      );\n      Validator.string(\n        message.content.action.title,\n        'message.content.action.title'\n      );\n\n      Validator.required(\n        message.content.action.sections,\n        'message.content.action.sections'\n      );\n      Validator.array(\n        message.content.action.sections,\n        'message.content.action.sections'\n      );\n\n      message.content.action.sections.forEach((section: any) => {\n        Validator.required(\n          section.rows,\n          'message.content.action.sections.rows'\n        );\n        Validator.array(section.rows, 'message.content.action.sections.rows');\n\n        section.rows.forEach((row: any) => {\n          Validator.required(row.id, 'message.content.action.sections.rows.id');\n          Validator.string(row.id, 'message.content.action.sections.rows.id');\n\n          Validator.required(\n            row.title,\n            'message.content.action.sections.rows.title'\n          );\n          Validator.string(\n            row.title,\n            'message.content.action.sections.rows.title'\n          );\n        });\n      });\n      break;\n\n    case 'interactive-product':\n      Validator.required(\n        message.content.action.catalogId,\n        'message.content.action.catalogId'\n      );\n      Validator.string(\n        message.content.action.catalogId,\n        'message.content.action.catalogId'\n      );\n\n      Validator.required(\n        message.content.action.productRetailerId,\n        'message.content.action.productRetailerId'\n      );\n      Validator.string(\n        message.content.action.productRetailerId,\n        'message.content.action.productRetailerId'\n      );\n      break;\n\n    case 'interactive-multi-product':\n      Validator.required(message.content.header, 'message.content.header');\n      Validator.object(message.content.header, 'message.content.header');\n\n      Validator.required(\n        message.content.header.type,\n        'message.content.header.type'\n      );\n      Validator.string(\n        message.content.header.type,\n        'message.content.header.type'\n      );\n\n      Validator.required(\n        message.content.action.catalogId,\n        'message.content.action.catalogId'\n      );\n      Validator.string(\n        message.content.action.catalogId,\n        'message.content.action.catalogId'\n      );\n\n      Validator.required(\n        message.content.action.sections,\n        'message.content.action.sections'\n      );\n      Validator.array(\n        message.content.action.sections,\n        'message.content.action.sections'\n      );\n\n      message.content.action.sections.forEach((section: any) => {\n        Validator.required(\n          section.productRetailerIds,\n          'message.content.action.sections.productRetailerIds'\n        );\n        Validator.array(\n          section.productRetailerIds,\n          'message.content.action.sections.productRetailerIds'\n        );\n      });\n      break;\n\n    default:\n      throw new Error(\"Invalid message type '\" + message.type + \"'\");\n  }\n\n  return true;\n}\n\nexport function validateWhatsappTemplateCreate(sender: string, request: any) {\n  Validator.required(sender, 'sender');\n  Validator.string(sender, 'sender');\n\n  Validator.required(request.name, 'request.name');\n  Validator.string(request.name, 'request.name');\n\n  Validator.required(request.language, 'request.language');\n  Validator.string(request.language, 'request.language');\n\n  Validator.required(request.category, 'request.category');\n  Validator.string(request.category, 'request.category');\n\n  Validator.required(request.structure, 'request.structure');\n  Validator.object(request.structure, 'request.structure');\n\n  Validator.required(request.structure.body, 'request.structure.body');\n  Validator.object(request.structure.body, 'request.structure.body');\n\n  Validator.required(\n    request.structure.body.text,\n    'request.structure.body.text'\n  );\n  Validator.string(request.structure.body.text, 'request.structure.body.text');\n\n  if (request.structure.header && request.structure.header.format === 'TEXT') {\n    Validator.required(\n      request.structure.header.text,\n      'request.structure.header.text'\n    );\n    Validator.string(\n      request.structure.header.text,\n      'request.structure.header.text'\n    );\n  }\n\n  if (request.structure.footer) {\n    Validator.required(\n      request.structure.footer.text,\n      'request.structure.footer.text'\n    );\n    Validator.string(\n      request.structure.footer.text,\n      'request.structure.footer.text'\n    );\n  }\n\n  if (request.structure.buttons) {\n    Validator.required(request.structure.buttons, 'request.structure.buttons');\n    Validator.array(request.structure.buttons, 'request.structure.buttons');\n\n    request.structure.buttons.forEach((button: any) => {\n      Validator.required(button.text, 'button.text');\n      Validator.string(button.text, 'button.text');\n\n      if (button.type === 'PHONE_NUMBER') {\n        Validator.required(button.phoneNumber, 'button.phoneNumber');\n        Validator.string(button.phoneNumber, 'button.phoneNumber');\n      }\n\n      if (button.type === 'URL') {\n        Validator.required(button.url, 'button.url');\n        Validator.string(button.url, 'button.url');\n      }\n    });\n  }\n\n  return true;\n}\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { Validator } from '../utils/validator';\nimport {\n  validateWhatsappSend,\n  validateWhatsappTemplateCreate,\n} from '../utils/validators/whatsapp';\n\nconst sendEndpoints: any = {\n  template: '/whatsapp/1/message/template',\n  text: '/whatsapp/1/message/text',\n  document: '/whatsapp/1/message/document',\n  image: '/whatsapp/1/message/image',\n  audio: '/whatsapp/1/message/audio',\n  video: '/whatsapp/1/message/video',\n  sticker: '/whatsapp/1/message/sticker',\n  location: '/whatsapp/1/message/location',\n  contact: '/whatsapp/1/message/contact',\n  'interactive-buttons': '/whatsapp/1/message/interactive/buttons',\n  'interactive-list': '/whatsapp/1/message/interactive/list',\n  'interactive-product': '/whatsapp/1/message/interactive/product',\n  'interactive-multi-product': '/whatsapp/1/message/interactive/multi-product',\n};\n\nconst endpoints: any = {\n  media: '/whatsapp/1/senders/{sender}/media/{mediaId}',\n  read: '/whatsapp/1/senders/{sender}/message/{messageId}/read',\n  template: '/whatsapp/2/senders/{sender}/templates',\n  identity: '/whatsapp/1/{sender}/contacts/{userNumber}/identity',\n};\n\nclass WhatsApp {\n  http: Http;\n  media: any;\n  template: any;\n  identity: any;\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n    this.media = {\n      download: this.downloadMedia.bind(this),\n      metadata: this.metadataMedia.bind(this),\n      delete: this.deleteMedia.bind(this),\n    };\n    this.template = {\n      get: this.getTemplate.bind(this),\n      create: this.createTemplate.bind(this),\n      delete: this.deleteTemplate.bind(this),\n    };\n    this.identity = {\n      get: this.getIdentity.bind(this),\n      confirm: this.confirmIdentity.bind(this),\n    };\n  }\n\n  async send(message: any) {\n    try {\n      if (!sendEndpoints[message.type])\n        throw new Error(\n          `Invalid message type ${\n            message.type\n          }. Supported types are: ${Object.keys(sendEndpoints).join(', ')}.`\n        );\n\n      validateWhatsappSend(message);\n\n      const response = await this.http.post(\n        sendEndpoints[message.type],\n        message\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async downloadMedia(sender: string, mediaId: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(mediaId, 'mediaId');\n      Validator.string(mediaId, 'mediaId');\n\n      const response = await this.http.download(\n        endpoints['media']\n          .replace(`{sender}`, sender)\n          .replace('{mediaId}', mediaId)\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async metadataMedia(sender: string, mediaId: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(mediaId, 'mediaId');\n      Validator.string(mediaId, 'mediaId');\n\n      const response = await this.http.head(\n        endpoints['media']\n          .replace(`{sender}`, sender)\n          .replace('{mediaId}', mediaId)\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async deleteMedia(sender: string, url: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(url, 'url');\n      Validator.string(url, 'url');\n\n      const response = await this.http.delete(\n        endpoints['media'].replace('{sender}', sender).replace('{mediaId}', ''),\n        { url }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async markAsRead(sender: string, messageId: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(messageId, 'messageId');\n      Validator.string(messageId, 'messageId');\n\n      const response = await this.http.post(\n        endpoints['read']\n          .replace(`{sender}`, sender)\n          .replace('{messageId}', messageId),\n        {}\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getTemplate(sender: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n\n      const response = await this.http.get(\n        endpoints['template'].replace(`{sender}`, sender)\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async createTemplate(sender: string, request: any) {\n    try {\n      validateWhatsappTemplateCreate(sender, request);\n\n      const response = await this.http.post(\n        endpoints['template'].replace(`{sender}`, sender),\n        request\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async deleteTemplate(sender: string, templateName: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(templateName, 'templateName');\n      Validator.string(templateName, 'templateName');\n\n      const response = await this.http.delete(\n        `${endpoints['template'].replace(`{sender}`, sender)}/${templateName}`\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getIdentity(sender: string, userNumber: string) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(userNumber, 'userNumber');\n      Validator.string(userNumber, 'userNumber');\n\n      const response = await this.http.get(\n        endpoints['identity']\n          .replace(`{sender}`, sender)\n          .replace(`{userNumber}`, userNumber)\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async confirmIdentity(\n    sender: string,\n    userNumber: string,\n    hash: string\n  ) {\n    try {\n      Validator.required(sender, 'sender');\n      Validator.string(sender, 'sender');\n      Validator.required(userNumber, 'userNumber');\n      Validator.string(userNumber, 'userNumber');\n      Validator.required(hash, 'hash');\n      Validator.string(hash, 'hash');\n\n      const response = await this.http.put(\n        endpoints['identity']\n          .replace(`{sender}`, sender)\n          .replace(`{userNumber}`, userNumber),\n        { hash }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { WhatsApp };\n","import { Validator } from '../validator';\n\nexport function validateSMSMessage(message: any) {\n  if (message.type === 'query') {\n    return validateSMSSendQuery(message);\n  } else {\n    return validateSMSSendTextAndBinary(message);\n  }\n}\n\nfunction validateSMSSendTextAndBinary(message: any) {\n  Validator.required(message.messages, 'messages');\n  Validator.array(message.messages, 'messages');\n\n  const tempMessage: any = message;\n  message.messages.forEach((message: any) => {\n    if (tempMessage.type === 'binary') {\n      if (message.binary) {\n        Validator.object(message.binary);\n        Validator.required(message.binary.hex, 'message.binary.hex');\n        Validator.string(message.binary.hex, 'message.binary.hex');\n      }\n    }\n    Validator.required(message, 'message');\n    Validator.object(message, 'message');\n\n    Validator.required(message.destinations, 'message.destinations');\n    Validator.array(message.destinations, 'message.destinations');\n\n    message.destinations.forEach((destination: any) => {\n      Validator.object(destination, 'message.destination');\n      Validator.required(destination.to, 'message.destination.to');\n      Validator.string(destination.to, 'message.destination.to');\n      Validator.maxLength(destination.to, 50, 'message.destination.to');\n    });\n\n    if (message.deliveryTimeWindow) {\n      Validator.required(\n        message.deliveryTimeWindow,\n        'message.deliveryTimeWindow'\n      );\n      Validator.object(\n        message.deliveryTimeWindow,\n        'message.deliveryTimeWindow'\n      );\n\n      Validator.required(\n        message.deliveryTimeWindow.days,\n        'message.deliveryTimeWindow.days'\n      );\n      Validator.array(\n        message.deliveryTimeWindow.days,\n        'message.deliveryTimeWindow.days'\n      );\n\n      message.deliveryTimeWindow.days.forEach((day: any) => {\n        Validator.string(day);\n      });\n\n      if (message.deliveryTimeWindow.from) {\n        Validator.required(\n          message.deliveryTimeWindow.from.hour,\n          'message.deliveryTimeWindow.from.hour'\n        );\n        Validator.integer(\n          message.deliveryTimeWindow.from.hour,\n          'message.deliveryTimeWindow.from.hour'\n        );\n\n        Validator.max(\n          message.deliveryTimeWindow.from.hour,\n          23,\n          'message.deliveryTimeWindow.from.hour'\n        );\n\n        Validator.required(\n          message.deliveryTimeWindow.from.minute,\n          'message.deliveryTimeWindow.from.minute'\n        );\n        Validator.integer(\n          message.deliveryTimeWindow.from.minute,\n          'message.deliveryTimeWindow.from.minute'\n        );\n        Validator.max(\n          message.deliveryTimeWindow.from.minute,\n          59,\n          'message.deliveryTimeWindow.from.minute'\n        );\n      }\n\n      if (message.deliveryTimeWindow.to) {\n        Validator.required(\n          message.deliveryTimeWindow.to.hour,\n          'message.deliveryTimeWindow.to.hour'\n        );\n        Validator.integer(\n          message.deliveryTimeWindow.to.hour,\n          'message.deliveryTimeWindow.to.hour'\n        );\n\n        Validator.max(\n          message.deliveryTimeWindow.to.hour,\n          23,\n          'message.deliveryTimeWindow.to.hour'\n        );\n\n        Validator.required(\n          message.deliveryTimeWindow.to.minute,\n          'message.deliveryTimeWindow.to.minute'\n        );\n        Validator.integer(\n          message.deliveryTimeWindow.to.minute,\n          'message.deliveryTimeWindow.to.minute'\n        );\n        Validator.max(\n          message.deliveryTimeWindow.to.minute,\n          59,\n          'message.deliveryTimeWindow.to.minute'\n        );\n      }\n    }\n\n    if (message.regional && message.regional.indiaDlt) {\n      Validator.required(\n        message.regional.indiaDlt.principalEntityId,\n        'message.regional.indiaDlt.principalEntityId'\n      );\n      Validator.string(\n        message.regional.indiaDlt.principalEntityId,\n        'message.regional.indiaDlt.principalEntityId'\n      );\n    }\n  });\n\n  if (message.sendingSpeedLimit) {\n    Validator.required(\n      message.sendingSpeedLimit.amount,\n      'message.sendingSpeedLimit.amount'\n    );\n    Validator.integer(\n      message.sendingSpeedLimit.amount,\n      'message.sendingSpeedLimit.amount'\n    );\n  }\n\n  return true;\n}\n\nfunction validateSMSSendQuery(message: any) {\n  Validator.required(message.username, 'username');\n  Validator.string(message.username, 'username');\n  Validator.required(message.password, 'password');\n  Validator.string(message.password, 'password');\n  Validator.required(message.to, 'to');\n  Validator.array(message.to, 'to');\n  message.to.forEach((to: any) => {\n    Validator.string(to, 'to');\n  });\n\n  return true;\n}\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { validateSMSMessage } from '../utils/validators/sms';\n\nimport { Validator } from '../utils/validator';\n\nconst sendEndpoints: any = {\n  text: '/sms/2/text/advanced',\n  binary: '/sms/2/binary/advanced',\n  query: '/sms/1/text/query',\n};\n\nconst endpoints: any = {\n  preview: '/sms/1/preview',\n  get: '/sms/1/inbox/reports',\n  reports: '/sms/1/reports',\n  logs: '/sms/1/logs',\n  schedule: '/sms/1/bulks',\n  status: '/sms/1/bulks/status',\n};\n\nclass SMS {\n  http: Http;\n  username?: string;\n  password?: string;\n  reports: any;\n  logs: any;\n  scheduled: any;\n  status: any;\n\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n    this.username = credentials.username;\n    this.password = credentials.password;\n\n    this.reports = {\n      get: this.getDeliveryReports.bind(this),\n    };\n    this.logs = {\n      get: this.getMessageLogs.bind(this),\n    };\n    this.scheduled = {\n      get: this.getScheduledMessage.bind(this),\n      reschedule: this.rescheduleMessage.bind(this),\n    };\n    this.status = {\n      get: this.getMessageStatus.bind(this),\n      update: this.updateMessageStatus.bind(this),\n    };\n  }\n\n  async send(message: any) {\n    try {\n      if (!message.type) message.type = 'text';\n      if (!sendEndpoints[message.type])\n        throw new Error(\n          `Invalid message type ${\n            message.type\n          }. Supported types are: ${Object.keys(sendEndpoints).join(', ')}.`\n        );\n\n      let response;\n      if (message.type === 'query') {\n        if (this.username && this.password) {\n          message.username = this.username;\n          message.password = this.password;\n        }\n\n        validateSMSMessage(message);\n        message.to = message.to.join(',');\n\n        response = await this.http.get(sendEndpoints[message.type], message);\n      } else {\n        validateSMSMessage(message);\n\n        response = await this.http.post(sendEndpoints[message.type], message);\n      }\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async preview(message: any) {\n    try {\n      Validator.requiredString(message.text, 'message.text');\n      const response = await this.http.post(endpoints.preview, message);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async get(limit?: number) {\n    try {\n      const response = await this.http.get(endpoints.get, { limit });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * See the status and the scheduled time of your SMS messages.\n   *\n   * @param { string } bulkId - ID of the scheduled message\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  private async getScheduledMessage(bulkId: string) {\n    try {\n      Validator.requiredString(bulkId, 'bulkId');\n\n      const response = await this.http.get(endpoints.schedule, { bulkId });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Change the date and time for sending scheduled messages.\n   *\n   * @param { string } bulkId - ID of the scheduled message\n   * @param { string } sendAt - Date and time when the message is to be sent.\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  private async rescheduleMessage(bulkId: string, sendAt: string) {\n    try {\n      Validator.requiredString(bulkId, 'bulkId');\n      Validator.requiredString(sendAt, 'sendAt');\n\n      const queryString = new URLSearchParams({ bulkId });\n      const response = await this.http.put(\n        endpoints.schedule + `/?${queryString}`,\n        { sendAt }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * See the status of scheduled messages.\n   *\n   * @param { string } bulkId - ID of the scheduled message\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  private async getMessageStatus(bulkId: string) {\n    try {\n      Validator.requiredString(bulkId, 'bulkId');\n\n      const response = await this.http.get(endpoints.status, { bulkId });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Change status or completely cancel sending of scheduled messages.\n   *\n   * @param { string } bulkId - ID of the scheduled message\n   * @param { string } status - The status of the message(s).\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  private async updateMessageStatus(bulkId: string, status: string) {\n    try {\n      Validator.requiredString(bulkId, 'bulkId');\n      Validator.requiredString(status, 'status');\n\n      const queryString = new URLSearchParams({ bulkId });\n      const response = await this.http.put(\n        endpoints.status + `/?${queryString}`,\n        { status }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getDeliveryReports(filter: any) {\n    try {\n      const response = await this.http.get(endpoints.reports, filter);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getMessageLogs(filter: any) {\n    try {\n      const response = await this.http.get(endpoints.logs, filter);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { SMS };\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { AuthType } from '../utils/auth-type';\nimport { URLSearchParams } from 'url';\nimport { Validator } from '../utils/validator';\n\nconst endpoints: any = {\n  session: '/auth/1/session',\n  oauth2: '/auth/1/oauth2/token',\n};\n\nclass Auth {\n  ibsso: any;\n  oauth2: any;\n  credentials: InfobipAuth;\n\n  constructor(credentials: InfobipAuth) {\n    this.credentials = credentials;\n    this.ibsso = {\n      create: this.createSession.bind(this),\n      destroy: this.destroySession.bind(this),\n    };\n\n    this.oauth2 = {\n      create: this.createToken.bind(this),\n    };\n  }\n\n  private async createSession() {\n    try {\n      Validator.required(this.credentials.password, 'Infobip.password');\n      Validator.required(this.credentials.username, 'Infobip.username');\n\n      const http = new Http(this.credentials.baseUrl);\n      const response = await http.post(endpoints.session, {\n        password: this.credentials.password,\n        username: this.credentials.username,\n      });\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async destroySession(ibssoToken: string) {\n    try {\n      const http = new Http(\n        this.credentials.baseUrl,\n        `${AuthType.IBSSO} ${ibssoToken}`\n      );\n      const response = await http.delete(endpoints.session);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async createToken() {\n    try {\n      Validator.required(this.credentials.password, 'Infobip.password');\n      Validator.required(this.credentials.username, 'Infobip.username');\n\n      const http = new Http(this.credentials.baseUrl);\n      const response = await http.post(\n        `${endpoints.oauth2}?${new URLSearchParams({\n          client_secret: this.credentials.password as string,\n          client_id: this.credentials.username as string,\n          grant_type: 'client_credentials',\n        }).toString()}`,\n        {},\n        {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n          },\n        }\n      );\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { Auth };\n","export function FormDataBuilder(formData: any, data: any, parentKey?: string) {\n  if (typeof data === 'object') {\n    Object.keys(data).forEach(key => {\n      if (key === 'attachment' || key === 'inlineImage') {\n        data[key].forEach((attachedObject: any) => {\n          formData.append(\n            parentKey ? `${parentKey}['${key}']` : key,\n            attachedObject.data,\n            attachedObject.name\n          );\n        });\n      } else {\n        FormDataBuilder(\n          formData,\n          data[key],\n          parentKey ? `${parentKey}['${key}']` : key\n        );\n      }\n    });\n  } else {\n    formData.append(parentKey, data);\n  }\n}\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { Validator } from '../utils/validator';\n\nconst endpoints: any = {\n  domain: '/email/1/domains',\n  verify: '/email/1/domains/{domainName}/verify',\n  tracking: '/email/1/domains/{domainName}/tracking',\n};\n\nclass EmailDomain {\n  http: Http;\n\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n  }\n\n  async get(filter?: any) {\n    try {\n      let response;\n      if (typeof filter === 'string') {\n        response = await this.http.get(`${endpoints.domain}/${filter}`);\n      } else {\n        response = await this.http.get(endpoints.domain, filter);\n      }\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async add(domainName: string) {\n    try {\n      Validator.required(domainName, 'domainName');\n      Validator.string(domainName, 'domainName');\n\n      const response = await this.http.post(endpoints.domain, { domainName });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async verify(domainName: string) {\n    try {\n      Validator.required(domainName, 'domainName');\n      Validator.string(domainName, 'domainName');\n\n      const response = await this.http.post(\n        endpoints.verify.replace('{domainName}', domainName),\n        {}\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async tracking(domainName: string, request: any) {\n    try {\n      Validator.required(domainName, 'domainName');\n      Validator.string(domainName, 'domainName');\n\n      const response = await this.http.put(\n        endpoints.tracking.replace('{domainName}', domainName),\n        request\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async delete(domainName: string) {\n    try {\n      Validator.required(domainName, 'domainName');\n      Validator.string(domainName, 'domainName');\n\n      const response = await this.http.delete(\n        `${endpoints.domain}/${domainName}`\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { EmailDomain };\n","import FormData from 'form-data';\n\nimport { Http } from '../utils/http';\nimport { FormDataBuilder } from '../utils/form-data';\nimport { InfobipAuth } from '../utils/auth';\nimport { Validator } from '../utils/validator';\nimport { EmailStatus } from '../utils/email-status-type';\nimport { EmailDomain } from './email-domain';\n\nconst endpoints: any = {\n  send: '/email/3/send',\n  validate: '/email/2/validation',\n  bulk: '/email/1/bulks',\n  report: '/email/1/reports',\n  status: '/email/1/bulks/status',\n  log: '/email/1/logs',\n};\n\nclass Email {\n  http: Http;\n  status: any;\n  report: any;\n  log: any;\n  domain: EmailDomain;\n\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n    this.domain = new EmailDomain(credentials);\n\n    this.log = {\n      get: this.getLog.bind(this),\n    };\n\n    this.report = {\n      get: this.getReport.bind(this),\n    };\n\n    this.status = {\n      get: this.getStatus.bind(this),\n      update: this.updateStatus.bind(this),\n    };\n  }\n\n  async send(email: any) {\n    try {\n      Validator.object(email, 'email');\n\n      Validator.requiredString(email.from, 'email.from');\n\n      Validator.required(email.to, 'email.to');\n      if (!Array.isArray(email.to)) {\n        email.to = [email.to];\n      }\n      Validator.array(email.to, 'email.to');\n      email.to.forEach((to: any, index: number) => {\n        Validator.string(to, `email.to[${index}]`);\n      });\n\n      if (email.cc) {\n        if (!Array.isArray(email.cc)) {\n          email.cc = [email.cc];\n        }\n        email.cc.forEach((cc: any, index: number) => {\n          Validator.string(cc, `email.cc[${index}]`);\n        });\n      }\n\n      if (email.bcc) {\n        if (!Array.isArray(email.bcc)) {\n          email.bcc = [email.bcc];\n        }\n        email.bcc.forEach((bcc: any, index: number) => {\n          Validator.string(bcc, `email.bcc[${index}]`);\n        });\n      }\n\n      if (!email.templateId) {\n        Validator.requiredString(email.subject, 'email.subject');\n        Validator.maxLength(email.subject, 1000, 'email.subject');\n      }\n\n      if (!(email.text || email.html || email.templateId)) {\n        throw new Error(\n          'Email must contain at least one of these (text, html or templateId).'\n        );\n      }\n\n      if (email.text) {\n        Validator.string(email.text, 'email.text');\n      }\n\n      if (email.html) {\n        Validator.string(email.html, 'email.html');\n      }\n\n      if (email.ampHtml) {\n        Validator.required(email.html, 'email.html');\n        Validator.string(email.ampHtml, 'email.ampHtml');\n      }\n\n      if (email.templateId) {\n        Validator.integer(email.templateId, 'email.templateId');\n      }\n\n      if (email.attachment) {\n        Validator.array(email.attachment, 'email.attachment');\n        email.attachment.forEach((attachmentObject: any) => {\n          Validator.required(attachmentObject.data, 'email.attachment[].data');\n          Validator.requiredString(\n            attachmentObject.name,\n            'email.attachment[].name'\n          );\n        });\n      }\n\n      if (email.inlineImage) {\n        Validator.array(email.inlineImage, 'email.inlineImage');\n        email.inlineImage.forEach((inlineImage: any) => {\n          Validator.required(inlineImage.data, 'email.inlineImage[].data');\n          Validator.requiredString(\n            inlineImage.name,\n            'email.inlineImage[].name'\n          );\n        });\n      }\n\n      if (email.intermediateReport) {\n        Validator.boolean(email.intermediateReport, 'email.intermediateReport');\n      }\n\n      if (email.notifyUrl) {\n        Validator.string(email.notifyUrl, 'email.notifyUrl');\n      }\n\n      if (email.notifyContentType) {\n        Validator.string(email.notifyContentType, 'email.notifyContentType');\n      }\n\n      if (email.callbackData) {\n        Validator.string(email.callbackData, 'email.callbackData');\n        Validator.maxLength(email.callbackData, 4000, 'email.callbackData');\n      }\n\n      if (email.track) {\n        Validator.boolean(email.track, 'email.track');\n      }\n\n      if (email.trackClicks) {\n        Validator.boolean(email.trackClicks, 'email.trackClicks');\n      }\n\n      if (email.trackOpens) {\n        Validator.boolean(email.trackOpens, 'email.trackOpens');\n      }\n\n      if (email.trackingUrl) {\n        Validator.string(email.trackingUrl, 'email.trackingUrl');\n      }\n\n      if (email.bulkId) {\n        Validator.string(email.bulkId, 'email.bulkId');\n      }\n\n      if (email.messageId) {\n        Validator.string(email.messageId, 'email.messageId');\n      }\n\n      if (email.replyTo) {\n        Validator.string(email.replyTo, 'email.replyTo');\n      }\n\n      if (email.defaultPlaceholders) {\n        Validator.string(\n          email.defaultPlaceholders,\n          'email.defaultPlaceholders'\n        );\n      }\n\n      if (email.preserveRecipients) {\n        Validator.boolean(email.preserveRecipients, 'email.preserveRecipients');\n      }\n\n      if (email.sendAt) {\n        Validator.string(email.sendAt, 'email.sendAt');\n      }\n\n      if (email.landingPagePlaceholders) {\n        Validator.string(\n          email.landingPagePlaceholders,\n          'email.landingPagePlaceholders'\n        );\n      }\n\n      if (email.landingPageId) {\n        Validator.string(email.landingPageId, 'email.landingPageId');\n      }\n\n      if (email.templateLanguageVersion) {\n        Validator.string(\n          email.templateLanguageVersion,\n          'email.templateLanguageVersion'\n        );\n      }\n\n      if (email.applicationId) {\n        Validator.string(email.applicationId, 'email.applicationId');\n      }\n\n      if (email.entityId) {\n        Validator.string(email.entityId, 'email.entityId');\n      }\n\n      let form = new FormData();\n      FormDataBuilder(form, email);\n\n      const response = await this.http.post(endpoints.send, form, {\n        headers: form.getHeaders(),\n      });\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async validate(to: string) {\n    try {\n      Validator.required(to, 'to');\n      Validator.string(to, 'to');\n\n      const response = await this.http.post(endpoints.validate, { to });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async get(bulkId: string) {\n    try {\n      Validator.required(bulkId, 'bulkId');\n      Validator.string(bulkId, 'bulkId');\n\n      const response = await this.http.get(endpoints.bulk, { bulkId });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async reschedule(bulkId: string, sendAt: string) {\n    try {\n      Validator.required(bulkId, 'bulkId');\n      Validator.string(bulkId, 'bulkId');\n\n      Validator.required(sendAt, 'sendAt');\n      Validator.string(sendAt, 'sendAt');\n\n      const response = await this.http.put(\n        `${endpoints.bulk}?bulkId=${bulkId}`,\n        { sendAt }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getReport(filter: any) {\n    try {\n      const response = await this.http.get(endpoints.report, filter);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getLog(filter: any) {\n    try {\n      const response = await this.http.get(endpoints.log, filter);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async getStatus(bulkId: string) {\n    try {\n      Validator.required(bulkId, 'bulkId');\n      Validator.string(bulkId, 'bulkId');\n\n      const response = await this.http.get(endpoints.status, { bulkId });\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async updateStatus(bulkId: string, status: EmailStatus) {\n    try {\n      Validator.required(bulkId, 'bulkId');\n      Validator.string(bulkId, 'bulkId');\n\n      Validator.required(status, 'status');\n      Validator.oneOf(status, EmailStatus, 'status');\n\n      const response = await this.http.put(\n        `${endpoints.status}?bulkId=${bulkId}`,\n        { status }\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { Email };\n","import { Http } from '../utils/http';\nimport { InfobipAuth } from '../utils/auth';\nimport { Validator } from '../utils/validator';\nimport {\n  TwoFAApplication,\n  TwoFAMessageTemplate,\n  TwoFAPinCode,\n  Pin,\n  TwoFAVerificationStatus,\n} from '../models/2fa-models';\n\nconst TwoFAEndpoints: any = {\n  uri: '/2fa/2/applications',\n};\n\nconst pin2FAEndpoints: any = {\n  uri: '/2fa/2/pin',\n};\n\nclass TwoFA {\n  http: Http;\n  username?: string;\n  password?: string;\n\n  constructor(credentials: InfobipAuth) {\n    this.http = new Http(credentials.baseUrl, credentials.authorization);\n    this.username = credentials.username;\n    this.password = credentials.password;\n  }\n\n  /**\n   * An application is a container for 2FA message templates\n   * Use this method to list your applications\n   *\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async getApplications() {\n    try {\n      const response = await this.http.get(TwoFAEndpoints.uri);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Create and configure a new 2FA application\n   *\n   * @param { TwoFAApplication | any } reqBody - Create 2FA application\n   * request body\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async createApplication(reqBody: TwoFAApplication | any) {\n    try {\n      Validator.requiredString(reqBody.name, 'name');\n\n      const response = await this.http.post(TwoFAEndpoints.uri, reqBody);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Get a single 2FA application to see its configuration details\n   *\n   * @param { string } appId - ID of the 2FA application\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async getApplication(appId: string) {\n    try {\n      Validator.requiredString(appId, 'appId');\n\n      const response = await this.http.get(TwoFAEndpoints.uri + `/${appId}`);\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Change configuration options for your existing 2FA application\n   *\n   * @param { string } appId - ID of the 2FA application\n   * @param { TwoFAApplication | any } reqBody - Change 2FA application\n   * request body\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async updateApplication(appId: string, reqBody: TwoFAApplication | any) {\n    try {\n      Validator.requiredString(appId, 'appId');\n      Validator.requiredString(reqBody.name, 'name');\n\n      const response = await this.http.put(\n        TwoFAEndpoints.uri + `/${appId}`,\n        reqBody\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * List all message templates in a 2FA application\n   *\n   * @param { string } appId - ID of the 2FA application\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async getMessageTemplates(appId: string) {\n    try {\n      Validator.requiredString(appId, 'appId');\n\n      const response = await this.http.get(\n        TwoFAEndpoints.uri + `/${appId}/messages`\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Once you have your 2FA application, create one or more message templates\n   * where your PIN will be dynamically included when you send the PIN message.\n   *\n   * @param { string } appId - ID of the 2FA application\n   * @param { TwoFAMessageTemplate | any } reqBody - Create message template\n   * request body\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async createMessageTemplate(\n    appId: string,\n    reqBody: TwoFAMessageTemplate | any\n  ) {\n    try {\n      Validator.requiredString(appId, 'appId');\n      Validator.requiredString(reqBody.messageText, 'messageText');\n      Validator.requiredString(reqBody.pinType, 'pinType');\n      if (reqBody.regional && reqBody.regional.indiaDlt) {\n        Validator.requiredString(\n          reqBody.regional.indiaDlt.principalEntityId,\n          'reqBody.regional.indiaDlt.principalEntityId'\n        );\n      }\n\n      const response = await this.http.post(\n        TwoFAEndpoints.uri + `/${appId}/messages`,\n        reqBody\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Get a single 2FA message template from an application to see its\n   * configuration details.\n   *\n   * @param { string } appId - ID of the 2FA application\n   * @param { string } messageId - ID of the message template\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async getMessageTemplate(appId: string, messageId: string) {\n    try {\n      Validator.requiredString(appId, 'appId');\n      Validator.requiredString(messageId, 'messageId');\n\n      const response = await this.http.get(\n        TwoFAEndpoints.uri + `/${appId}/messages/${messageId}`\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Change configuration options for your existing 2FA application message\n   * template.\n   *\n   * @param { string } appId - ID of the 2FA application\n   * @param { string } messageId - ID of the message template\n   * @param { TwoFAMessageTemplate | any } reqBody - Update message template\n   * request body\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async updateMessageTemplate(\n    appId: string,\n    messageId: string,\n    reqBody: TwoFAMessageTemplate | any\n  ) {\n    try {\n      Validator.requiredString(appId, 'appId');\n      Validator.requiredString(messageId, 'messageId');\n      if (reqBody.regional && reqBody.regional.indiaDlt) {\n        Validator.requiredString(\n          reqBody.regional.indiaDlt.principalEntityId,\n          'reqBody.regional.indiaDlt.principalEntityId'\n        );\n      }\n\n      const response = await this.http.put(\n        TwoFAEndpoints.uri + `/${appId}/messages/${messageId}`,\n        reqBody\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Send a PIN code over SMS using a previously created message template\n   *\n   * @param { string } ncNeededQuery - Indicates if Number Lookup is needed\n   * before sending the 2FA message.\n   * @param { TwoFAPinCode | any } reqBody - Send PIN over SMS request body\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async sendPINCodeSMS(reqBody: TwoFAPinCode | any, ncNeededQuery?: boolean) {\n    try {\n      Validator.requiredString(reqBody.applicationId, 'applicationId');\n      Validator.requiredString(reqBody.messageId, 'messageId');\n      Validator.requiredString(reqBody.to, 'to');\n\n      let ncNeeded = 'true';\n      if (!ncNeededQuery) {\n        ncNeeded = String(ncNeededQuery);\n      }\n\n      const query = new URLSearchParams({ ncNeeded });\n      const queryString = query.toString();\n      const response = await this.http.post(\n        pin2FAEndpoints.uri + `/?${queryString}`,\n        reqBody\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * If needed, you can resend the same (previously sent) PIN code over SMS\n   *\n   * @param { string } pinId - ID of the pin code that has to be verified\n   * @param { object | any } reqBody - Resend PIN over SMS request body\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async resendPINCodeSMS(pinId: string, reqBody: object | any = {}) {\n    try {\n      Validator.requiredString(pinId, 'pinId');\n\n      const response = await this.http.post(\n        pin2FAEndpoints.uri + `/${pinId}/resend`,\n        reqBody\n      );\n\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Send a PIN code over Voice using previously created message template\n   *\n   * @param { TwoFAPinCode | any } reqBody - Send PIN over Voice request body\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async sendPINCodeVoice(reqBody: TwoFAPinCode | any) {\n    try {\n      Validator.requiredString(reqBody.applicationId, 'applicationId');\n      Validator.requiredString(reqBody.messageId, 'messageId');\n      Validator.requiredString(reqBody.to, 'to');\n\n      const response = await this.http.post(\n        pin2FAEndpoints.uri + '/voice',\n        reqBody\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * If needed, you can resend the same (previously sent) PIN code over Voice\n   *\n   * @param { string } pinId - ID of the pin code that has to be verified\n   * @param { object | any } reqBody - Resend PIN over Voice request body\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async resendPINCodeVoice(pinId: string, reqBody: object | any = {}) {\n    try {\n      Validator.requiredString(pinId, 'pinId');\n\n      const response = await this.http.post(\n        pin2FAEndpoints.uri + `/${pinId}/resend/voice`,\n        reqBody\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Verify a phone number to confirm successful 2FA authentication\n   *\n   * @param { string } pinId - ID of the pin code that has to be verified\n   * @param { Pin | any } reqBody - Verify a phone number request body\n   *                         The PIN code to verify\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async verifyPhoneNumber(pinId: string, reqBody: Pin | any) {\n    try {\n      Validator.requiredString(pinId, 'pinId');\n      Validator.requiredString(reqBody.pin, 'pin');\n\n      const response = await this.http.post(\n        pin2FAEndpoints.uri + `/${pinId}/verify`,\n        reqBody\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  /**\n   * Check if a phone number is already verified for a specific 2FA application\n   *\n   * @param { string } appId - ID of 2-FA application for which phone number\n   * verification status is requested.\n   * @param { TwoFAVerificationStatus | any } queryParameters - Get verification\n   * status request query parameters.\n   * @return { AxiosResponse<any, any> } response - Return Axios Response\n   */\n  async getVerificationStatus(\n    appId: string,\n    queryParameters: TwoFAVerificationStatus | any\n  ) {\n    try {\n      Validator.requiredString(appId, 'appId');\n      Validator.requiredString(queryParameters.msisdn, 'msisdn');\n\n      const query = new URLSearchParams(queryParameters);\n      const queryString = query.toString();\n      const response = await this.http.get(\n        TwoFAEndpoints.uri + `/${appId}/verifications/?${queryString}`\n      );\n      return response;\n    } catch (error) {\n      return error;\n    }\n  }\n}\n\nexport { TwoFA };\n","import { AuthType } from './utils/auth-type';\nimport { EmailStatus } from './utils/email-status-type';\nimport { InfobipAuth } from './utils/auth';\nimport { Validator } from './utils/validator';\nimport { WhatsApp } from './apis/whatsapp';\nimport { SMS } from './apis/sms';\nimport { Auth } from './apis/auth';\nimport { Email } from './apis/email';\nimport { TwoFA } from './apis/2fa';\nimport {\n  TwoFAApplication,\n  TwoFAMessageTemplate,\n  TwoFAPinCode,\n  Pin,\n  TwoFAVerificationStatus,\n} from './models/2fa-models';\n\nclass Infobip {\n  /**\n   *\n   * @param {InfobipAuth} config - Configuration object for Infobip API\n   *\n   */\n\n  credentials: InfobipAuth;\n  service: any;\n  channels: any;\n  auth: any;\n\n  constructor({\n    baseUrl,\n    authType,\n    apiKey,\n    username,\n    password,\n    oauthToken,\n    ibssoToken,\n  }: InfobipAuth) {\n    Validator.required(baseUrl, 'Infobip.baseUrl');\n    Validator.required(authType, 'Infobip.authType');\n\n    password && Validator.string(password, 'Infobip.password');\n    username && Validator.string(username, 'Infobip.username');\n    apiKey && Validator.string(apiKey, 'Infobip.apiKey');\n    oauthToken && Validator.string(oauthToken, 'Infobip.oauthToken');\n    ibssoToken && Validator.string(ibssoToken, 'Infobip.ibssoToken');\n\n    this.credentials = new InfobipAuth({\n      baseUrl,\n      authType,\n      apiKey,\n      username,\n      password,\n      oauthToken,\n      ibssoToken,\n    });\n    this.channels = {\n      whatsapp: new WhatsApp(this.credentials),\n      email: new Email(this.credentials),\n      sms: new SMS(this.credentials),\n    };\n    this.service = {\n      twoFA: new TwoFA(this.credentials),\n    };\n    this.auth = new Auth(this.credentials);\n  }\n}\n\nexport {\n  Infobip,\n  AuthType,\n  EmailStatus,\n  TwoFAApplication,\n  TwoFAMessageTemplate,\n  TwoFAPinCode,\n  Pin,\n  TwoFAVerificationStatus,\n};\n"],"names":["AuthType","EmailStatus","Validator","required","x","name","Error","string","Number","isInteger","Array","isArray","y","Object","values","includes","join","length","InfobipAuth","_ref$authType","authType","ApiKey","_ref$apiKey","apiKey","_ref$username","username","_ref$password","password","_ref$ibssoToken","ibssoToken","_ref$oauthToken","oauthToken","this","baseUrl","authorization","Basic","Buffer","from","toString","IBSSO","OAuth","Http","indexOf","axios","create","baseURL","headers","Content-Type","Authorization","_proto","post","url","body","config","_context","put","_context2","get","params","_context3","download","_context4","responseType","head","_context5","_context6","data","validateWhatsappSend","message","type","to","content","object","text","header","mediaUrl","footer","action","messages","array","forEach","m","templateName","language","templateData","placeholders","longitude","number","latitude","contacts","contact","firstName","formattedName","buttons","button","id","title","sections","section","rows","row","catalogId","productRetailerId","productRetailerIds","validateWhatsappTemplateCreate","sender","request","category","structure","format","phoneNumber","sendEndpoints","template","document","image","audio","video","sticker","location","interactive-buttons","interactive-list","interactive-product","interactive-multi-product","endpoints","media","read","identity","WhatsApp","credentials","http","downloadMedia","bind","metadata","metadataMedia","delete","deleteMedia","getTemplate","createTemplate","deleteTemplate","getIdentity","confirm","confirmIdentity","send","keys","mediaId","replace","markAsRead","messageId","_context7","_context8","userNumber","_context9","hash","_context10","validateSMSMessage","validateSMSSendQuery","tempMessage","binary","hex","destinations","destination","maxLength","deliveryTimeWindow","days","day","hour","integer","max","minute","regional","indiaDlt","principalEntityId","sendingSpeedLimit","amount","validateSMSSendTextAndBinary","query","SMS","reports","getDeliveryReports","logs","getMessageLogs","scheduled","getScheduledMessage","reschedule","rescheduleMessage","status","getMessageStatus","update","updateMessageStatus","response","preview","requiredString","limit","bulkId","sendAt","queryString","URLSearchParams","filter","Auth","ibsso","createSession","destroy","destroySession","oauth2","createToken","client_secret","client_id","grant_type","FormDataBuilder","formData","parentKey","key","attachedObject","append","domain","verify","tracking","EmailDomain","add","domainName","Email","log","getLog","report","getReport","getStatus","updateStatus","email","index","cc","bcc","templateId","subject","html","ampHtml","attachment","attachmentObject","inlineImage","intermediateReport","notifyUrl","notifyContentType","callbackData","track","trackClicks","trackOpens","trackingUrl","replyTo","defaultPlaceholders","preserveRecipients","landingPagePlaceholders","landingPageId","templateLanguageVersion","applicationId","entityId","form","FormData","getHeaders","validate","oneOf","TwoFA","getApplications","createApplication","reqBody","getApplication","appId","TwoFAEndpoints","updateApplication","getMessageTemplates","createMessageTemplate","messageText","pinType","getMessageTemplate","updateMessageTemplate","sendPINCodeSMS","ncNeededQuery","ncNeeded","String","pin2FAEndpoints","resendPINCodeSMS","pinId","sendPINCodeVoice","_context11","resendPINCodeVoice","_context12","verifyPhoneNumber","_context13","pin","getVerificationStatus","queryParameters","_context14","msisdn","channels","whatsapp","sms","service","twoFA","auth"],"mappings":"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"}